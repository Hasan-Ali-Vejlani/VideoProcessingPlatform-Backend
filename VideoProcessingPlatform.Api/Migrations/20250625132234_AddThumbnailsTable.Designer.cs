// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoProcessingPlatform.Infrastructure.Data;

#nullable disable

namespace VideoProcessingPlatform.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250625132234_AddThumbnailsTable")]
    partial class AddThumbnailsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.EncodingProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApplyDRM")
                        .HasColumnType("bit");

                    b.Property<int>("BitrateKbps")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FFmpegArgsTemplate")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileName")
                        .IsUnique();

                    b.ToTable("EncodingProfiles");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.Thumbnail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("TimestampSeconds")
                        .HasColumnType("int");

                    b.Property<Guid>("UploadMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UploadMetadataId");

                    b.ToTable("Thumbnails");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.TranscodingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApplyDRM")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EncodingProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EncodingProfileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FFmpegArgsTemplate")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("SourceStoragePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetBitrateKbps")
                        .HasColumnType("int");

                    b.Property<string>("TargetFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TargetResolution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UploadMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EncodingProfileId");

                    b.HasIndex("UploadMetadataId");

                    b.HasIndex("UserId");

                    b.ToTable("TranscodingJobs");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.UploadMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompletedChunks")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("OriginalFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalStoragePath")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SelectedThumbnailUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("TotalChunks")
                        .HasColumnType("int");

                    b.Property<string>("UploadStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UploadMetadata");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5761b01-7e04-4f58-8c64-46ce9ec3b24f"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            PasswordHash = "$2a$11$KUTK0Grj2NACm8nQRSuMQeMRXy9HN9M0Ab3bVj0.XDtgfVkGJEm/m",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.VideoRendition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BitrateKbps")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<string>("PlaybackUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RenditionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("TranscodingJobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TranscodingJobId");

                    b.ToTable("VideoRenditions");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.Thumbnail", b =>
                {
                    b.HasOne("VideoProcessingPlatform.Core.Entities.UploadMetadata", "UploadMetadata")
                        .WithMany("Thumbnails")
                        .HasForeignKey("UploadMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadMetadata");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.TranscodingJob", b =>
                {
                    b.HasOne("VideoProcessingPlatform.Core.Entities.EncodingProfile", "EncodingProfile")
                        .WithMany("TranscodingJobs")
                        .HasForeignKey("EncodingProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoProcessingPlatform.Core.Entities.UploadMetadata", "UploadMetadata")
                        .WithMany("TranscodingJobs")
                        .HasForeignKey("UploadMetadataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoProcessingPlatform.Core.Entities.User", "User")
                        .WithMany("TranscodingJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EncodingProfile");

                    b.Navigation("UploadMetadata");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.UploadMetadata", b =>
                {
                    b.HasOne("VideoProcessingPlatform.Core.Entities.User", "User")
                        .WithMany("UploadMetadata")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.VideoRendition", b =>
                {
                    b.HasOne("VideoProcessingPlatform.Core.Entities.TranscodingJob", "TranscodingJob")
                        .WithMany("VideoRenditions")
                        .HasForeignKey("TranscodingJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranscodingJob");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.EncodingProfile", b =>
                {
                    b.Navigation("TranscodingJobs");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.TranscodingJob", b =>
                {
                    b.Navigation("VideoRenditions");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.UploadMetadata", b =>
                {
                    b.Navigation("Thumbnails");

                    b.Navigation("TranscodingJobs");
                });

            modelBuilder.Entity("VideoProcessingPlatform.Core.Entities.User", b =>
                {
                    b.Navigation("TranscodingJobs");

                    b.Navigation("UploadMetadata");
                });
#pragma warning restore 612, 618
        }
    }
}
